diff --git a/node_modules/react-github-calendar/dist/index.es.js b/node_modules/react-github-calendar/dist/index.es.js
index cbeb1b2..85601fd 100644
--- a/node_modules/react-github-calendar/dist/index.es.js
+++ b/node_modules/react-github-calendar/dist/index.es.js
@@ -38,7 +38,7 @@ function styleInject(css, ref) {
   }
 }
 
-var css_248z = ".styles_chart__316M8 {\n  margin-bottom: 1rem;\n}\n\n.styles_calendar__1PAia {\n  max-width: 100%;\n  height: auto;\n  margin-bottom: 0.25rem;\n  overflow: visible;\n}\n\n.styles_loading__1gKsy {\n  font-size: 90%;\n}\n\n.styles_title__HcRKb {\n  margin-bottom: 0.5rem;\n  padding-bottom: 0.25rem;\n}\n";
+var css_248z = ".styles_chart__316M8 {\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.styles_calendar__1PAia {\r\n  max-width: 100%;\r\n  height: auto;\r\n  margin-bottom: 0.25rem;\r\n  overflow: visible;\r\n}\r\n\r\n.styles_loading__1gKsy {\r\n  font-size: 90%;\r\n}\r\n\r\n.styles_title__HcRKb {\r\n  margin-bottom: 0.5rem;\r\n  padding-bottom: 0.25rem;\r\n}\r\n";
 var styles = {"chart":"styles_chart__316M8","calendar":"styles_calendar__1PAia","loading":"styles_loading__1gKsy","title":"styles_title__HcRKb"};
 styleInject(css_248z);
 
@@ -55,7 +55,6 @@ const DEFAULT_THEME = {
 const NAMESPACE = 'react-github-calendar';
 const LINE_HEIGHT = 1.5;
 const MIN_DISTANCE_MONTH_LABELS = 2;
-const TITLE_SCALE_FACTOR = 1.25;
 
 function usePrevious(value) {
   const ref = useRef(value);
@@ -66,46 +65,17 @@ function usePrevious(value) {
 }
 
 // Import modules separately to reduce bundle size
-const API_URL = 'https://github-calendar.now.sh/v1/';
+const API_URL = 'https://ancient-butterfly.herokuapp.com/v3/';
 const DATE_FORMAT = 'yyyy-MM-dd';
 
 function getContributionsForDate(data, date) {
   return data.contributions.find(contrib => contrib.date === date);
 }
 
-function getContributionCountForLastYear(data) {
-  const {
-    contributions
-  } = data;
-  const now = new Date(); // Start date for accumulating the values
-
-  const begin = contributions.findIndex(contrib => contrib.date === format(now, DATE_FORMAT)); // No data for today given
-
-  if (begin === -1) {
-    return 0;
-  } // Check if there is data for the day one year past
-
-
-  let end = contributions.findIndex(contrib => {
-    return contrib.date === format(subYears(now, 1), DATE_FORMAT);
-  }); // Take the oldest contribution otherwise, if not enough data exists
-
-  if (end === -1) {
-    end = contributions.length - 1;
-  }
-
-  return contributions.slice(begin, end).reduce((acc, contrib) => acc + contrib.count, 0);
-}
-
-function getContributionCountForYear(data, year) {
-  const yearEntry = data.years.find(entry => entry.year === String(year));
-  return yearEntry ? yearEntry.total : 0;
-}
-
-function getBlocksForYear(year, data, fullYear) {
+function getBlocksForYear(year, data, lastYear) {
   const now = new Date();
-  const firstDate = fullYear ? subYears(now, 1) : parseISO(`${year}-01-01`);
-  const lastDate = fullYear ? now : parseISO(`${year}-12-31`);
+  const firstDate = lastYear ? subYears(now, 1) : parseISO(`${year}-01-01`);
+  const lastDate = lastYear ? now : parseISO(`${year}-12-31`);
   let weekStart = firstDate; // The week starts on Sunday - add days to get to next sunday if neccessary
 
   if (getDay(firstDate) !== 0) {
@@ -143,11 +113,10 @@ function getBlocksForYear(year, data, fullYear) {
 
     return dates;
   });
-} // eslint-disable-next-line @typescript-eslint/no-explicit-any
-
+}
 
-function getMonthLabels(blocks, fullYear) {
-  const weeks = blocks.slice(0, fullYear ? blocks.length - 1 : blocks.length);
+function getMonthLabels(blocks, lastYear) {
+  const weeks = blocks.slice(0, lastYear ? blocks.length - 1 : blocks.length);
   let previousMonth = 0; // January
 
   return weeks.reduce((labels, week, x) => {
@@ -168,10 +137,10 @@ function getMonthLabels(blocks, fullYear) {
   }, []);
 }
 
-function getGraphDataForYear(year, data, fullYear) {
-  const blocks = getBlocksForYear(year, data, fullYear);
-  const monthLabels = getMonthLabels(blocks, fullYear);
-  const totalCount = fullYear ? getContributionCountForLastYear(data) : getContributionCountForYear(data, year);
+function getGraphDataForYear(year, data, lastYear) {
+  const blocks = getBlocksForYear(year, data, lastYear);
+  const monthLabels = getMonthLabels(blocks, lastYear);
+  const totalCount = data.years[lastYear ? 'lastYear' : year] ?? 0;
   return {
     year,
     blocks,
@@ -180,21 +149,31 @@ function getGraphDataForYear(year, data, fullYear) {
   };
 }
 
+const getPureData = async (options, pureData) => {
+  const {
+    years,
+    lastYear
+  } = options;
+  return years.map(year => {
+    const isCurrentYear = isSameYear(parseISO(String(year)), new Date());
+    return getGraphDataForYear(year, pureData, isCurrentYear && lastYear);
+  });
+};
 async function getGitHubGraphData(options) {
   const {
-    fullYear,
     username,
-    years
+    years,
+    lastYear
   } = options;
-  const data = await (await fetch(API_URL + username)).json();
+  const data = await (await fetch(`${API_URL}${username}?y=all&y=lastYear`)).json();
 
-  if (!data.years.length) {
+  if (!Object.keys(data.years).length) {
     throw Error('No data available');
   }
 
   return years.map(year => {
     const isCurrentYear = isSameYear(parseISO(String(year)), new Date());
-    return getGraphDataForYear(year, data, isCurrentYear && fullYear);
+    return getGraphDataForYear(year, data, isCurrentYear && lastYear);
   });
 }
 
@@ -225,18 +204,20 @@ function getClassName(name, extra) {
 }
 
 const GitHubCalendar = ({
-  blockSize = 12,
-  blockMargin = 2,
-  children,
-  color = undefined,
-  dateFormat = 'MMM d, yyyy',
-  fontSize = 14,
-  fullYear = true,
-  theme = undefined,
-  username,
-  style = {},
-  years = [Number(format(new Date(), 'yyyy'))]
-}) => {
+                          username,
+                          blockMargin = 2,
+                          blockSize = 12,
+                          children,
+                          color = undefined,
+                          dateFormat = 'MMM d, yyyy',
+                          fontSize = 14,
+                          fullYear = true,
+                          pureData = undefined,
+                          showTotalCount = true,
+                          style = {},
+                          theme = undefined,
+                          years = [Number(format(new Date(), 'yyyy'))]
+                        }) => {
   const [graphs, setGraphs] = useState(null);
   const [error, setError] = useState(null);
   const prevYears = usePrevious(years);
@@ -247,13 +228,20 @@ const GitHubCalendar = ({
     getGitHubGraphData({
       years,
       username,
-      fullYear
-    }).then(graphs => setGraphs(graphs)).catch(error => setError(error));
+      lastYear: fullYear
+    }).then(setGraphs).catch(setError);
   }, [years, username, fullYear]); // Fetch data on mount
 
   useEffect(() => {
-    fetchData();
-  }, []); // eslint-disable-line
+    if (!pureData) fetchData();else {
+      (async () => {
+        setGraphs(await getPureData({
+          years,
+          lastYear: fullYear
+        }, pureData));
+      })();
+    }
+  }, [pureData]); // eslint-disable-line
   // Refetch if relevant props change
 
   useEffect(() => {
@@ -291,28 +279,6 @@ const GitHubCalendar = ({
     return `<strong>${day.info.count} contributions</strong> on ${format(date, dateFormat)}`;
   }
 
-  function renderTitle() {
-    const style = {
-      borderBottom: `2px solid ${getTheme().grade0}`,
-      fontSize: `${Math.round(fontSize * TITLE_SCALE_FACTOR)}px`
-    };
-    return (
-      /*#__PURE__*/
-      React.createElement("div", {
-        className: getClassName('title', styles.title),
-        style: style
-      },
-      /*#__PURE__*/
-      React.createElement("a", {
-        href: `https://github.com/${username}`,
-        title: "GitHub profile",
-        style: {
-          color: 'inherit'
-        }
-      }, "@", username, " on GitHub"))
-    );
-  }
-
   function renderMonthLabels(monthLabels) {
     const style = {
       fill: getTheme().text,
@@ -324,9 +290,7 @@ const GitHubCalendar = ({
       monthLabels.shift();
     }
 
-    return monthLabels.map(month =>
-    /*#__PURE__*/
-    React.createElement("text", {
+    return monthLabels.map(month => /*#__PURE__*/React.createElement("text", {
       x: (blockSize + blockMargin) * month.x,
       y: fontSize,
       key: month.x,
@@ -337,35 +301,28 @@ const GitHubCalendar = ({
   function renderBlocks(blocks) {
     const theme = getTheme();
     const textHeight = Math.round(fontSize * LINE_HEIGHT);
-    return blocks.map(week => week.map((day, y) =>
-    /*#__PURE__*/
-    React.createElement("rect", {
+    return blocks.map(week => week.map((day, y) => /*#__PURE__*/React.createElement("rect", {
       x: "0",
       y: textHeight + (blockSize + blockMargin) * y,
       width: blockSize,
       height: blockSize,
-      fill: theme[`grade${day.info ? day.info.intensity : 0}`],
+      fill: theme[`grade${day.info ? day.info.level : 0}`],
       "data-tip": day.info ? getTooltipMessage(day) : null,
       key: day.date
-    }))).map((week, x) =>
-    /*#__PURE__*/
-    React.createElement("g", {
+    }))).map((week, x) => /*#__PURE__*/React.createElement("g", {
       key: x,
       transform: `translate(${(blockSize + blockMargin) * x}, 0)`
     }, week));
   }
 
-  function renderMeta(year, totalCount) {
+  function renderTotalCount(year, totalCount) {
     const isCurrentYear = getYear(new Date()) === year;
-    return (
-      /*#__PURE__*/
-      React.createElement("div", {
-        className: getClassName('meta'),
-        style: {
-          fontSize
-        }
-      }, isCurrentYear && fullYear ? 'Last year' : year, ' â€“ ', isCurrentYear && !fullYear ? 'So far ' : null, totalCount, " contributions")
-    );
+    return /*#__PURE__*/React.createElement("div", {
+      className: getClassName('meta'),
+      style: {
+        fontSize
+      }
+    }, isCurrentYear && fullYear ? 'Last year' : year, ' â€“ ', isCurrentYear && !fullYear ? 'So far ' : null, totalCount, " contributions");
   }
 
   const {
@@ -375,53 +332,39 @@ const GitHubCalendar = ({
 
   if (error) {
     console.error(error);
-    return (
-      /*#__PURE__*/
-      React.createElement("p", null, "Error :(")
-    );
+    return /*#__PURE__*/React.createElement("p", null, "Error :(");
   }
 
   if (!graphs) {
-    return (
-      /*#__PURE__*/
-      React.createElement("div", {
-        className: getClassName('loading', styles.loading)
-      }, "Loading \u2026")
-    );
+    return /*#__PURE__*/React.createElement("div", {
+      className: getClassName('loading', styles.loading)
+    }, "Loading \u2026");
   }
 
-  return (
-    /*#__PURE__*/
-    React.createElement("article", {
-      className: NAMESPACE,
-      style: style
-    }, renderTitle(), graphs.map(graph => {
-      const {
-        year,
-        blocks,
-        monthLabels,
-        totalCount
-      } = graph;
-      return (
-        /*#__PURE__*/
-        React.createElement("div", {
-          key: year,
-          className: getClassName('chart', styles.chart)
-        },
-        /*#__PURE__*/
-        React.createElement("svg", {
-          xmlns: "http://www.w3.org/2000/svg",
-          width: width,
-          height: height,
-          viewBox: `0 0 ${width} ${height}`,
-          className: getClassName('calendar', styles.calendar),
-          style: {
-            backgroundColor: theme === null || theme === void 0 ? void 0 : theme.background
-          }
-        }, renderMonthLabels(monthLabels), renderBlocks(blocks)), renderMeta(year, totalCount), children)
-      );
-    }))
-  );
+  return /*#__PURE__*/React.createElement("article", {
+    className: NAMESPACE,
+    style: style
+  }, graphs.map(graph => {
+    const {
+      year,
+      blocks,
+      monthLabels,
+      totalCount
+    } = graph;
+    return /*#__PURE__*/React.createElement("div", {
+      key: year,
+      className: getClassName('chart', styles.chart)
+    }, /*#__PURE__*/React.createElement("svg", {
+      xmlns: "http://www.w3.org/2000/svg",
+      width: width,
+      height: height,
+      viewBox: `0 0 ${width} ${height}`,
+      className: getClassName('calendar', styles.calendar),
+      style: {
+        backgroundColor: theme === null || theme === void 0 ? void 0 : theme.background
+      }
+    }, renderMonthLabels(monthLabels), renderBlocks(blocks)), showTotalCount && renderTotalCount(year, totalCount), children);
+  }));
 };
 
 export default GitHubCalendar;
diff --git a/node_modules/react-github-calendar/dist/index.js b/node_modules/react-github-calendar/dist/index.js
index 6235454..84cb833 100644
--- a/node_modules/react-github-calendar/dist/index.js
+++ b/node_modules/react-github-calendar/dist/index.js
@@ -2,21 +2,33 @@
 
 Object.defineProperty(exports, '__esModule', { value: true });
 
-function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }
-
 var React = require('react');
-var React__default = _interopDefault(React);
-var format = _interopDefault(require('date-fns/format'));
-var parseISO = _interopDefault(require('date-fns/parseISO'));
-var getYear = _interopDefault(require('date-fns/getYear'));
-var addDays = _interopDefault(require('date-fns/addDays'));
-var getDay = _interopDefault(require('date-fns/getDay'));
-var getMonth = _interopDefault(require('date-fns/getMonth'));
-var isAfter = _interopDefault(require('date-fns/isAfter'));
-var isSameYear = _interopDefault(require('date-fns/isSameYear'));
-var setDay = _interopDefault(require('date-fns/setDay'));
-var subYears = _interopDefault(require('date-fns/subYears'));
-var color = _interopDefault(require('tinycolor2'));
+var format = require('date-fns/format');
+var parseISO = require('date-fns/parseISO');
+var getYear = require('date-fns/getYear');
+var addDays = require('date-fns/addDays');
+var getDay = require('date-fns/getDay');
+var getMonth = require('date-fns/getMonth');
+var isAfter = require('date-fns/isAfter');
+var isSameYear = require('date-fns/isSameYear');
+var setDay = require('date-fns/setDay');
+var subYears = require('date-fns/subYears');
+var color = require('tinycolor2');
+
+function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }
+
+var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
+var format__default = /*#__PURE__*/_interopDefaultLegacy(format);
+var parseISO__default = /*#__PURE__*/_interopDefaultLegacy(parseISO);
+var getYear__default = /*#__PURE__*/_interopDefaultLegacy(getYear);
+var addDays__default = /*#__PURE__*/_interopDefaultLegacy(addDays);
+var getDay__default = /*#__PURE__*/_interopDefaultLegacy(getDay);
+var getMonth__default = /*#__PURE__*/_interopDefaultLegacy(getMonth);
+var isAfter__default = /*#__PURE__*/_interopDefaultLegacy(isAfter);
+var isSameYear__default = /*#__PURE__*/_interopDefaultLegacy(isSameYear);
+var setDay__default = /*#__PURE__*/_interopDefaultLegacy(setDay);
+var subYears__default = /*#__PURE__*/_interopDefaultLegacy(subYears);
+var color__default = /*#__PURE__*/_interopDefaultLegacy(color);
 
 function styleInject(css, ref) {
   if ( ref === void 0 ) ref = {};
@@ -45,7 +57,7 @@ function styleInject(css, ref) {
   }
 }
 
-var css_248z = ".styles_chart__316M8 {\n  margin-bottom: 1rem;\n}\n\n.styles_calendar__1PAia {\n  max-width: 100%;\n  height: auto;\n  margin-bottom: 0.25rem;\n  overflow: visible;\n}\n\n.styles_loading__1gKsy {\n  font-size: 90%;\n}\n\n.styles_title__HcRKb {\n  margin-bottom: 0.5rem;\n  padding-bottom: 0.25rem;\n}\n";
+var css_248z = ".styles_chart__316M8 {\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.styles_calendar__1PAia {\r\n  max-width: 100%;\r\n  height: auto;\r\n  margin-bottom: 0.25rem;\r\n  overflow: visible;\r\n}\r\n\r\n.styles_loading__1gKsy {\r\n  font-size: 90%;\r\n}\r\n\r\n.styles_title__HcRKb {\r\n  margin-bottom: 0.5rem;\r\n  padding-bottom: 0.25rem;\r\n}\r\n";
 var styles = {"chart":"styles_chart__316M8","calendar":"styles_calendar__1PAia","loading":"styles_loading__1gKsy","title":"styles_title__HcRKb"};
 styleInject(css_248z);
 
@@ -62,7 +74,6 @@ const DEFAULT_THEME = {
 const NAMESPACE = 'react-github-calendar';
 const LINE_HEIGHT = 1.5;
 const MIN_DISTANCE_MONTH_LABELS = 2;
-const TITLE_SCALE_FACTOR = 1.25;
 
 function usePrevious(value) {
   const ref = React.useRef(value);
@@ -73,62 +84,33 @@ function usePrevious(value) {
 }
 
 // Import modules separately to reduce bundle size
-const API_URL = 'https://github-calendar.now.sh/v1/';
+const API_URL = 'https://ancient-butterfly.herokuapp.com/v3/';
 const DATE_FORMAT = 'yyyy-MM-dd';
 
 function getContributionsForDate(data, date) {
   return data.contributions.find(contrib => contrib.date === date);
 }
 
-function getContributionCountForLastYear(data) {
-  const {
-    contributions
-  } = data;
-  const now = new Date(); // Start date for accumulating the values
-
-  const begin = contributions.findIndex(contrib => contrib.date === format(now, DATE_FORMAT)); // No data for today given
-
-  if (begin === -1) {
-    return 0;
-  } // Check if there is data for the day one year past
-
-
-  let end = contributions.findIndex(contrib => {
-    return contrib.date === format(subYears(now, 1), DATE_FORMAT);
-  }); // Take the oldest contribution otherwise, if not enough data exists
-
-  if (end === -1) {
-    end = contributions.length - 1;
-  }
-
-  return contributions.slice(begin, end).reduce((acc, contrib) => acc + contrib.count, 0);
-}
-
-function getContributionCountForYear(data, year) {
-  const yearEntry = data.years.find(entry => entry.year === String(year));
-  return yearEntry ? yearEntry.total : 0;
-}
-
-function getBlocksForYear(year, data, fullYear) {
+function getBlocksForYear(year, data, lastYear) {
   const now = new Date();
-  const firstDate = fullYear ? subYears(now, 1) : parseISO(`${year}-01-01`);
-  const lastDate = fullYear ? now : parseISO(`${year}-12-31`);
+  const firstDate = lastYear ? subYears__default['default'](now, 1) : parseISO__default['default'](`${year}-01-01`);
+  const lastDate = lastYear ? now : parseISO__default['default'](`${year}-12-31`);
   let weekStart = firstDate; // The week starts on Sunday - add days to get to next sunday if neccessary
 
-  if (getDay(firstDate) !== 0) {
-    weekStart = addDays(firstDate, getDay(firstDate));
+  if (getDay__default['default'](firstDate) !== 0) {
+    weekStart = addDays__default['default'](firstDate, getDay__default['default'](firstDate));
   } // Fetch graph data for first row (Sundays)
 
 
   const firstRowDates = [];
 
   while (weekStart <= lastDate) {
-    const date = format(weekStart, DATE_FORMAT);
+    const date = format__default['default'](weekStart, DATE_FORMAT);
     firstRowDates.push({
       date,
       info: getContributionsForDate(data, date)
     });
-    weekStart = setDay(weekStart, 7);
+    weekStart = setDay__default['default'](weekStart, 7);
   } // Add the remainig days per week (column for column)
 
 
@@ -136,9 +118,9 @@ function getBlocksForYear(year, data, fullYear) {
     const dates = [];
 
     for (let i = 0; i <= 6; i += 1) {
-      const date = format(setDay(parseISO(dateObj.date), i), DATE_FORMAT);
+      const date = format__default['default'](setDay__default['default'](parseISO__default['default'](dateObj.date), i), DATE_FORMAT);
 
-      if (isAfter(parseISO(date), lastDate)) {
+      if (isAfter__default['default'](parseISO__default['default'](date), lastDate)) {
         break;
       }
 
@@ -150,23 +132,22 @@ function getBlocksForYear(year, data, fullYear) {
 
     return dates;
   });
-} // eslint-disable-next-line @typescript-eslint/no-explicit-any
-
+}
 
-function getMonthLabels(blocks, fullYear) {
-  const weeks = blocks.slice(0, fullYear ? blocks.length - 1 : blocks.length);
+function getMonthLabels(blocks, lastYear) {
+  const weeks = blocks.slice(0, lastYear ? blocks.length - 1 : blocks.length);
   let previousMonth = 0; // January
 
   return weeks.reduce((labels, week, x) => {
-    const firstWeekDay = parseISO(week[0].date);
-    const month = getMonth(firstWeekDay) + 1;
+    const firstWeekDay = parseISO__default['default'](week[0].date);
+    const month = getMonth__default['default'](firstWeekDay) + 1;
     const monthChanged = month !== previousMonth;
     const firstMonthIsDecember = x === 0 && month === 12;
 
     if (monthChanged && !firstMonthIsDecember) {
       labels.push({
         x,
-        label: format(firstWeekDay, 'MMM')
+        label: format__default['default'](firstWeekDay, 'MMM')
       });
       previousMonth = month;
     }
@@ -175,10 +156,10 @@ function getMonthLabels(blocks, fullYear) {
   }, []);
 }
 
-function getGraphDataForYear(year, data, fullYear) {
-  const blocks = getBlocksForYear(year, data, fullYear);
-  const monthLabels = getMonthLabels(blocks, fullYear);
-  const totalCount = fullYear ? getContributionCountForLastYear(data) : getContributionCountForYear(data, year);
+function getGraphDataForYear(year, data, lastYear) {
+  const blocks = getBlocksForYear(year, data, lastYear);
+  const monthLabels = getMonthLabels(blocks, lastYear);
+  const totalCount = data.years[lastYear ? 'lastYear' : year] ?? 0;
   return {
     year,
     blocks,
@@ -187,32 +168,42 @@ function getGraphDataForYear(year, data, fullYear) {
   };
 }
 
+const getPureData = async (options, pureData) => {
+  const {
+    years,
+    lastYear
+  } = options;
+  return years.map(year => {
+    const isCurrentYear = isSameYear__default['default'](parseISO__default['default'](String(year)), new Date());
+    return getGraphDataForYear(year, pureData, isCurrentYear && lastYear);
+  });
+};
 async function getGitHubGraphData(options) {
   const {
-    fullYear,
     username,
-    years
+    years,
+    lastYear
   } = options;
-  const data = await (await fetch(API_URL + username)).json();
+  const data = await (await fetch(`${API_URL}${username}?y=all&y=lastYear`)).json();
 
-  if (!data.years.length) {
+  if (!Object.keys(data.years).length) {
     throw Error('No data available');
   }
 
   return years.map(year => {
-    const isCurrentYear = isSameYear(parseISO(String(year)), new Date());
-    return getGraphDataForYear(year, data, isCurrentYear && fullYear);
+    const isCurrentYear = isSameYear__default['default'](parseISO__default['default'](String(year)), new Date());
+    return getGraphDataForYear(year, data, isCurrentYear && lastYear);
   });
 }
 
-function createCalendarTheme(baseColor, textColor = 'inherit', emptyCellColor = color('white').darken(8).toHslString(), background = 'transparent') {
-  const base = color(baseColor);
+function createCalendarTheme(baseColor, textColor = 'inherit', emptyCellColor = color__default['default']('white').darken(8).toHslString(), background = 'transparent') {
+  const base = color__default['default'](baseColor);
 
   if (!base.isValid()) {
     return DEFAULT_THEME;
   }
 
-  const text = color(textColor).isValid() ? String(color(textColor)) : DEFAULT_THEME.text;
+  const text = color__default['default'](textColor).isValid() ? String(color__default['default'](textColor)) : DEFAULT_THEME.text;
   return {
     background,
     text,
@@ -232,18 +223,20 @@ function getClassName(name, extra) {
 }
 
 const GitHubCalendar = ({
-  blockSize = 12,
-  blockMargin = 2,
-  children,
-  color = undefined,
-  dateFormat = 'MMM d, yyyy',
-  fontSize = 14,
-  fullYear = true,
-  theme = undefined,
-  username,
-  style = {},
-  years = [Number(format(new Date(), 'yyyy'))]
-}) => {
+                          username,
+                          blockMargin = 2,
+                          blockSize = 12,
+                          children,
+                          color = undefined,
+                          dateFormat = 'MMM d, yyyy',
+                          fontSize = 14,
+                          fullYear = true,
+                          pureData = undefined,
+                          showTotalCount = true,
+                          style = {},
+                          theme = undefined,
+                          years = [Number(format__default['default'](new Date(), 'yyyy'))]
+                        }) => {
   const [graphs, setGraphs] = React.useState(null);
   const [error, setError] = React.useState(null);
   const prevYears = usePrevious(years);
@@ -254,13 +247,20 @@ const GitHubCalendar = ({
     getGitHubGraphData({
       years,
       username,
-      fullYear
-    }).then(graphs => setGraphs(graphs)).catch(error => setError(error));
+      lastYear: fullYear
+    }).then(setGraphs).catch(setError);
   }, [years, username, fullYear]); // Fetch data on mount
 
   React.useEffect(() => {
-    fetchData();
-  }, []); // eslint-disable-line
+    if (!pureData) fetchData();else {
+      (async () => {
+        setGraphs(await getPureData({
+          years,
+          lastYear: fullYear
+        }, pureData));
+      })();
+    }
+  }, [pureData]); // eslint-disable-line
   // Refetch if relevant props change
 
   React.useEffect(() => {
@@ -294,30 +294,8 @@ const GitHubCalendar = ({
   }
 
   function getTooltipMessage(day) {
-    const date = parseISO(day.date);
-    return `<strong>${day.info.count} contributions</strong> on ${format(date, dateFormat)}`;
-  }
-
-  function renderTitle() {
-    const style = {
-      borderBottom: `2px solid ${getTheme().grade0}`,
-      fontSize: `${Math.round(fontSize * TITLE_SCALE_FACTOR)}px`
-    };
-    return (
-      /*#__PURE__*/
-      React__default.createElement("div", {
-        className: getClassName('title', styles.title),
-        style: style
-      },
-      /*#__PURE__*/
-      React__default.createElement("a", {
-        href: `https://github.com/${username}`,
-        title: "GitHub profile",
-        style: {
-          color: 'inherit'
-        }
-      }, "@", username, " on GitHub"))
-    );
+    const date = parseISO__default['default'](day.date);
+    return `<strong>${day.info.count} contributions</strong> on ${format__default['default'](date, dateFormat)}`;
   }
 
   function renderMonthLabels(monthLabels) {
@@ -331,9 +309,7 @@ const GitHubCalendar = ({
       monthLabels.shift();
     }
 
-    return monthLabels.map(month =>
-    /*#__PURE__*/
-    React__default.createElement("text", {
+    return monthLabels.map(month => /*#__PURE__*/React__default['default'].createElement("text", {
       x: (blockSize + blockMargin) * month.x,
       y: fontSize,
       key: month.x,
@@ -344,35 +320,28 @@ const GitHubCalendar = ({
   function renderBlocks(blocks) {
     const theme = getTheme();
     const textHeight = Math.round(fontSize * LINE_HEIGHT);
-    return blocks.map(week => week.map((day, y) =>
-    /*#__PURE__*/
-    React__default.createElement("rect", {
+    return blocks.map(week => week.map((day, y) => /*#__PURE__*/React__default['default'].createElement("rect", {
       x: "0",
       y: textHeight + (blockSize + blockMargin) * y,
       width: blockSize,
       height: blockSize,
-      fill: theme[`grade${day.info ? day.info.intensity : 0}`],
+      fill: theme[`grade${day.info ? day.info.level : 0}`],
       "data-tip": day.info ? getTooltipMessage(day) : null,
       key: day.date
-    }))).map((week, x) =>
-    /*#__PURE__*/
-    React__default.createElement("g", {
+    }))).map((week, x) => /*#__PURE__*/React__default['default'].createElement("g", {
       key: x,
       transform: `translate(${(blockSize + blockMargin) * x}, 0)`
     }, week));
   }
 
-  function renderMeta(year, totalCount) {
-    const isCurrentYear = getYear(new Date()) === year;
-    return (
-      /*#__PURE__*/
-      React__default.createElement("div", {
-        className: getClassName('meta'),
-        style: {
-          fontSize
-        }
-      }, isCurrentYear && fullYear ? 'Last year' : year, ' â€“ ', isCurrentYear && !fullYear ? 'So far ' : null, totalCount, " contributions")
-    );
+  function renderTotalCount(year, totalCount) {
+    const isCurrentYear = getYear__default['default'](new Date()) === year;
+    return /*#__PURE__*/React__default['default'].createElement("div", {
+      className: getClassName('meta'),
+      style: {
+        fontSize
+      }
+    }, isCurrentYear && fullYear ? 'Last year' : year, ' â€“ ', isCurrentYear && !fullYear ? 'So far ' : null, totalCount, " contributions");
   }
 
   const {
@@ -382,53 +351,39 @@ const GitHubCalendar = ({
 
   if (error) {
     console.error(error);
-    return (
-      /*#__PURE__*/
-      React__default.createElement("p", null, "Error :(")
-    );
+    return /*#__PURE__*/React__default['default'].createElement("p", null, "Error :(");
   }
 
   if (!graphs) {
-    return (
-      /*#__PURE__*/
-      React__default.createElement("div", {
-        className: getClassName('loading', styles.loading)
-      }, "Loading \u2026")
-    );
+    return /*#__PURE__*/React__default['default'].createElement("div", {
+      className: getClassName('loading', styles.loading)
+    }, "Loading \u2026");
   }
 
-  return (
-    /*#__PURE__*/
-    React__default.createElement("article", {
-      className: NAMESPACE,
-      style: style
-    }, renderTitle(), graphs.map(graph => {
-      const {
-        year,
-        blocks,
-        monthLabels,
-        totalCount
-      } = graph;
-      return (
-        /*#__PURE__*/
-        React__default.createElement("div", {
-          key: year,
-          className: getClassName('chart', styles.chart)
-        },
-        /*#__PURE__*/
-        React__default.createElement("svg", {
-          xmlns: "http://www.w3.org/2000/svg",
-          width: width,
-          height: height,
-          viewBox: `0 0 ${width} ${height}`,
-          className: getClassName('calendar', styles.calendar),
-          style: {
-            backgroundColor: theme === null || theme === void 0 ? void 0 : theme.background
-          }
-        }, renderMonthLabels(monthLabels), renderBlocks(blocks)), renderMeta(year, totalCount), children)
-      );
-    }))
-  );
+  return /*#__PURE__*/React__default['default'].createElement("article", {
+    className: NAMESPACE,
+    style: style
+  }, graphs.map(graph => {
+    const {
+      year,
+      blocks,
+      monthLabels,
+      totalCount
+    } = graph;
+    return /*#__PURE__*/React__default['default'].createElement("div", {
+      key: year,
+      className: getClassName('chart', styles.chart)
+    }, /*#__PURE__*/React__default['default'].createElement("svg", {
+      xmlns: "http://www.w3.org/2000/svg",
+      width: width,
+      height: height,
+      viewBox: `0 0 ${width} ${height}`,
+      className: getClassName('calendar', styles.calendar),
+      style: {
+        backgroundColor: theme === null || theme === void 0 ? void 0 : theme.background
+      }
+    }, renderMonthLabels(monthLabels), renderBlocks(blocks)), showTotalCount && renderTotalCount(year, totalCount), children);
+  }));
 };
 
 exports.createCalendarTheme = createCalendarTheme;
